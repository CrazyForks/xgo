package patch

import (
	xgo_ctxt "cmd/compile/internal/xgo_rewrite_internal/patch/ctxt"
	xgo_syntax "cmd/compile/internal/xgo_rewrite_internal/patch/syntax"
	"strings"
)

const xgoRuntimePkgPrefix = xgo_ctxt.XgoRuntimePkg + "/"
const xgoTestPkgPrefix = xgo_ctxt.XgoModule + "/test/"
const xgoRuntimeTrapPkg = xgoRuntimePkgPrefix + "trap"

// accepts interface{} as argument
const xgoOnTestStart = "__xgo_on_test_start"

const setTrap = "__xgo_set_trap"

// only allowed from reflect
const reflectSetImpl = "__xgo_set_all_method_by_name_impl"

var linkMap = map[string]string{
	"__xgo_link_getcurg":                      "__xgo_getcurg",
	"__xgo_link_set_trap":                     setTrap,
	"__xgo_link_init_finished":                "__xgo_init_finished",
	"__xgo_link_on_init_finished":             "__xgo_on_init_finished",
	"__xgo_link_on_goexit":                    "__xgo_on_goexit",
	"__xgo_link_on_test_start":                xgoOnTestStart,
	"__xgo_link_get_test_starts":              "__xgo_get_test_starts",
	"__xgo_link_retrieve_all_funcs_and_clear": "__xgo_retrieve_all_funcs_and_clear",
	"__xgo_link_peek_panic":                   "__xgo_peek_panic",
	"__xgo_link_mem_equal":                    "__xgo_mem_equal",
	"__xgo_link_get_pc_name":                  "__xgo_get_pc_name",
	xgo_syntax.XgoLinkGeneratedRegisterFunc:   "__xgo_register_func",

	// reflect (not enabled)
	// "__xgo_link_set_all_method_by_name_impl": reflectSetImpl,
	// "__xgo_link_get_all_method_by_name":      "__xgo_get_all_method_by_name",
}

// a switch to control link
const disableXgoLink bool = false

func isLinkValid(fnName string, targetName string, pkgPath string) bool {
	if disableXgoLink {
		return false
	}
	safeGenerated := fnName == xgo_syntax.XgoLinkGeneratedRegisterFunc
	if safeGenerated {
		// generated by xgo on the fly for every instrumented package
		return true
	}
	isReflect := targetName == reflectSetImpl
	if isReflect {
		// the special reflect
		return pkgPath == "reflect"
	}

	isTrap := targetName == setTrap
	if isTrap {
		// the special trap
		return pkgPath == xgoRuntimeTrapPkg || strings.HasPrefix(pkgPath, xgoTestPkgPrefix)
	}

	// no special link, must be inside xgoRuntime, or test
	if pkgPath == "testing" {
		return true
	}
	if strings.HasPrefix(pkgPath, xgoRuntimePkgPrefix) {
		return true
	}
	if strings.HasPrefix(pkgPath, xgoTestPkgPrefix) {
		return true
	}
	return false
}
